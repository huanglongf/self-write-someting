<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60000" debug="true">
    <!--从spring中读取日志输出目录 value-->
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
  <!--  <springProperty scope="context" name="LOG_DIR" source="logback.logFileDir"/>-->
    <!--如果不使用配置中心,直接设定日志目录-->
   <property name="LOG_DIR" value="/export/logs/ucplogs/sncdata/manager" />
    <!-- 日志文件前缀 -->
    <property name="LOG_PREFIX" value="snc_manager" />
    <!-- 日志打印输出格式 -->
    <property name="OUT_PATTERN" value="%yellow(%d{yyyy-MM-dd HH:mm:ss.SSS})|%highlight(%-5p)|%white(%t)|%blue(%c):%green(%L)|%cyan(%m%n)" />
    <!--日志文件格式,不要改动，关系到后续日志处理-->
    <property name="LOG_PATTERN" value="sncdata|%d{yyyy-MM-dd HH:mm:ss.SSS}|%-5p|%t|%c:%L|%m%n" />
    <!-- 日志保留天数 -->
    <property name="LOG_HISTORY" value="30" />
    <!-- 单个日志文件大小 -->
    <property name="LOG_SIZE" value="20MB" />
    <!-- 日志字符集 -->
    <property name="LOG_CHAR" value="UTF-8" />

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${OUT_PATTERN}</pattern>
            <charset>${LOG_CHAR}</charset>
        </encoder>

    </appender>

    <!-- DEBUG日志输出 -->
    <appender name="DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/${LOG_PREFIX}_debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${LOG_HISTORY}</maxHistory>
            <maxFileSize>${LOG_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>${LOG_CHAR}</charset>
        </encoder>

    </appender>

    <!-- INFO日志输出 -->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/${LOG_PREFIX}_info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${LOG_HISTORY}</maxHistory>
            <maxFileSize>${LOG_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>${LOG_CHAR}</charset>
        </encoder>

    </appender>

    <!-- WARN日志输出 -->
    <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/${LOG_PREFIX}_warn.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${LOG_HISTORY}</maxHistory>
            <maxFileSize>${LOG_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>${LOG_CHAR}</charset>
        </encoder>

    </appender>


    <!-- ERROR日志输出 -->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/${LOG_PREFIX}_error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${LOG_HISTORY}</maxHistory>
            <maxFileSize>${LOG_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>${LOG_CHAR}</charset>
        </encoder>

    </appender>
    <!--异步写日志，相当于队列异步消费，转发appender-->
    <!--<appender name ="ASYN_INFO" class= "ch.qos.logback.classic.AsyncAppender">-->
    <!--&lt;!&ndash; 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 &ndash;&gt;-->
    <!--<discardingThreshold>0</discardingThreshold>-->
    <!--&lt;!&ndash; 更改默认的队列的深度,该值会影响性能.默认值为256 &ndash;&gt;-->
    <!--<queueSize>256</queueSize>-->
    <!--&lt;!&ndash; 添加附加的appender,最多只能添加一个 &ndash;&gt;-->
    <!--<appender-ref ref ="INFO_LOG"/>-->
    <!--</appender>-->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ERROR_LOG" />
        <appender-ref ref="WARN_LOG" />
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="DEBUG_LOG" />
    </root>
</configuration>
